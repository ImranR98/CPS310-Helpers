const addressingModes = {
    immediate: 'Immediate',
    direct: 'Direct',
    indexed: 'Indexed',
    extended: 'Extended',
    register: 'Register',
    relative: 'Relative'
}

const opCodes = new Map()
opCodes.set('00', { assembly: ['NEG'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('03', { assembly: ['COM'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('04', { assembly: ['LSR'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('06', { assembly: ['ROR'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('07', { assembly: ['ASR'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('08', { assembly: ['ASL', 'LSL'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('09', { assembly: ['ROL'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('0A', { assembly: ['DEC'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('0C', { assembly: ['INC'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('0D', { assembly: ['TST'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('0E', { assembly: ['JMP'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('0F', { assembly: ['CLR'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('12', { assembly: ['NOP'], mode: addressingModes.register, bytes: '1' })
opCodes.set('13', { assembly: ['SYNC'], mode: addressingModes.register, bytes: '1' })
opCodes.set('19', { assembly: ['DAA'], mode: addressingModes.register, bytes: '1' })
opCodes.set('1A', { assembly: ['ORCC'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('1C', { assembly: ['ANDCC'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('1D', { assembly: ['SEX'], mode: addressingModes.register, bytes: '1' })
opCodes.set('1E', { assembly: ['EXG'], mode: addressingModes.register, bytes: '2' }) // Immediate?
opCodes.set('1F', { assembly: ['TFR'], mode: addressingModes.register, bytes: '2' }) // Immediate?
opCodes.set('30', { assembly: ['LEAX'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('31', { assembly: ['LEAY'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('32', { assembly: ['LEAS'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('33', { assembly: ['LEAU'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('34', { assembly: ['PSHS'], mode: addressingModes.register, bytes: '2' }) // Immediate?
opCodes.set('35', { assembly: ['PULS'], mode: addressingModes.register, bytes: '2' }) // Immediate?
opCodes.set('36', { assembly: ['PSHU'], mode: addressingModes.register, bytes: '2' }) // Immediate?
opCodes.set('37', { assembly: ['PULU'], mode: addressingModes.register, bytes: '2' }) // Immediate?
opCodes.set('39', { assembly: ['RTS'], mode: addressingModes.register, bytes: '1' })
opCodes.set('3A', { assembly: ['ABX'], mode: addressingModes.register, bytes: '1' })
opCodes.set('3B', { assembly: ['RTI'], mode: addressingModes.register, bytes: '1' })
opCodes.set('3C', { assembly: ['CWAI'], mode: addressingModes.register, bytes: '2' })
opCodes.set('3D', { assembly: ['MUL'], mode: addressingModes.register, bytes: '1' })
opCodes.set('3F', { assembly: ['SWI'], mode: null, bytes: '1' })
opCodes.set('40', { assembly: ['NEGA'], mode: addressingModes.register, bytes: '1' })
opCodes.set('43', { assembly: ['COMA'], mode: addressingModes.register, bytes: '1' })
opCodes.set('44', { assembly: ['LSRA'], mode: addressingModes.register, bytes: '1' })
opCodes.set('46', { assembly: ['RORA'], mode: addressingModes.register, bytes: '1' })
opCodes.set('47', { assembly: ['ASRA'], mode: addressingModes.register, bytes: '1' })
opCodes.set('48', { assembly: ['ASLA', 'LSLA'], mode: addressingModes.register, bytes: '1' })
opCodes.set('49', { assembly: ['ROLA'], mode: addressingModes.register, bytes: '1' })
opCodes.set('4A', { assembly: ['DECA'], mode: addressingModes.register, bytes: '1' })
opCodes.set('4C', { assembly: ['INCA'], mode: addressingModes.register, bytes: '1' })
opCodes.set('4D', { assembly: ['TSTA'], mode: addressingModes.register, bytes: '1' })
opCodes.set('4F', { assembly: ['CLRA'], mode: addressingModes.register, bytes: '1' })
opCodes.set('50', { assembly: ['NEGB'], mode: addressingModes.register, bytes: '1' })
opCodes.set('53', { assembly: ['COMB'], mode: addressingModes.register, bytes: '1' })
opCodes.set('54', { assembly: ['LSRB'], mode: addressingModes.register, bytes: '1' })
opCodes.set('56', { assembly: ['RORB'], mode: addressingModes.register, bytes: '1' })
opCodes.set('57', { assembly: ['ASRB'], mode: addressingModes.register, bytes: '1' })
opCodes.set('58', { assembly: ['ASLB', 'LSLB'], mode: addressingModes.register, bytes: '1' })
opCodes.set('59', { assembly: ['ROLB'], mode: addressingModes.register, bytes: '1' })
opCodes.set('5A', { assembly: ['DECB'], mode: addressingModes.register, bytes: '1' })
opCodes.set('5C', { assembly: ['INCB'], mode: addressingModes.register, bytes: '1' })
opCodes.set('5D', { assembly: ['TSTB'], mode: addressingModes.register, bytes: '1' })
opCodes.set('5F', { assembly: ['CLRB'], mode: addressingModes.register, bytes: ' ' })
opCodes.set('60', { assembly: ['NEG'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('63', { assembly: ['COM'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('64', { assembly: ['LSR'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('66', { assembly: ['ROR'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('67', { assembly: ['ASR'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('68', { assembly: ['ASL', 'LSL'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('69', { assembly: ['ROL'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('6A', { assembly: ['DEC'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('6C', { assembly: ['INC'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('6D', { assembly: ['TST'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('6E', { assembly: ['JMP'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('6F', { assembly: ['CLR'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('70', { assembly: ['NEG'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('73', { assembly: ['COM'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('74', { assembly: ['LSR'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('76', { assembly: ['ROR'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('77', { assembly: ['ASR'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('78', { assembly: ['ASL', 'LSL'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('79', { assembly: ['ROL'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('7A', { assembly: ['DEC'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('7C', { assembly: ['INC'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('7D', { assembly: ['TST'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('7E', { assembly: ['JMP'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('7F', { assembly: ['CLR'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('80', { assembly: ['SUBA'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('81', { assembly: ['CMPA'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('82', { assembly: ['SBCA'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('83', { assembly: ['SUBD'], mode: addressingModes.immediate, bytes: '3' })
opCodes.set('84', { assembly: ['ANDA'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('85', { assembly: ['BITA'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('86', { assembly: ['LDA'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('88', { assembly: ['EORA'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('89', { assembly: ['ADCA'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('8A', { assembly: ['ORA'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('8B', { assembly: ['ADDA'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('8C', { assembly: ['CMPX'], mode: addressingModes.immediate, bytes: '3' })
opCodes.set('8E', { assembly: ['LDX'], mode: addressingModes.immediate, bytes: '3' })
opCodes.set('90', { assembly: ['SUBA'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('91', { assembly: ['CMPA'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('92', { assembly: ['SBCA'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('93', { assembly: ['SUBD'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('94', { assembly: ['ANDA'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('95', { assembly: ['BITA'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('96', { assembly: ['LDA'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('97', { assembly: ['STA'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('98', { assembly: ['EORA'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('99', { assembly: ['ADCA'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('9A', { assembly: ['ORA'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('9B', { assembly: ['ADDA'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('9C', { assembly: ['CMPX'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('9D', { assembly: ['JSR'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('9E', { assembly: ['LDX'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('9F', { assembly: ['STX'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('A0', { assembly: ['SUBA'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('A1', { assembly: ['CMPA'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('A2', { assembly: ['SBCA'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('A3', { assembly: ['SUBD'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('A4', { assembly: ['ANDA'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('A5', { assembly: ['BITA'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('A6', { assembly: ['LDA'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('A7', { assembly: ['STA'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('A8', { assembly: ['EORA'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('A9', { assembly: ['ADCA'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('AA', { assembly: ['ORA'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('AB', { assembly: ['ADDA'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('AC', { assembly: ['CMPX'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('AD', { assembly: ['JSR'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('AE', { assembly: ['LDX'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('AF', { assembly: ['STX'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('B0', { assembly: ['SUBA'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('B1', { assembly: ['CMPA'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('B2', { assembly: ['SBCA'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('B3', { assembly: ['SUBD'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('B4', { assembly: ['ANDA'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('B5', { assembly: ['BITA'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('B6', { assembly: ['LDA'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('B7', { assembly: ['STA'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('B8', { assembly: ['EORA'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('B9', { assembly: ['ADCA'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('BA', { assembly: ['ORA'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('BB', { assembly: ['ADDA'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('BC', { assembly: ['CMPX'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('BD', { assembly: ['JSR'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('BE', { assembly: ['LDX'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('BF', { assembly: ['STX'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('C0', { assembly: ['SUBS'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('C1', { assembly: ['CMPB'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('C2', { assembly: ['SBCS'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('C3', { assembly: ['ADDD'], mode: addressingModes.immediate, bytes: '3' })
opCodes.set('C4', { assembly: ['ANDB'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('C5', { assembly: ['BITB'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('C6', { assembly: ['LDB'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('C8', { assembly: ['EORB'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('C9', { assembly: ['ADCB'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('CA', { assembly: ['ORB'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('CB', { assembly: ['ADDB'], mode: addressingModes.immediate, bytes: '2' })
opCodes.set('CC', { assembly: ['LDD'], mode: addressingModes.immediate, bytes: '3' })
opCodes.set('CE', { assembly: ['LOU'], mode: addressingModes.immediate, bytes: '3' })
opCodes.set('D0', { assembly: ['SUBS'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('D1', { assembly: ['CMPB'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('D2', { assembly: ['SBCS'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('D3', { assembly: ['ADDD'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('D4', { assembly: ['ANDB'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('D5', { assembly: ['BITB'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('D6', { assembly: ['LDB'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('D7', { assembly: ['STB'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('D8', { assembly: ['EORB'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('D9', { assembly: ['ADCB'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('DA', { assembly: ['ORB'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('DB', { assembly: ['ADDB'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('DC', { assembly: ['LDD'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('DD', { assembly: ['STD'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('DE', { assembly: ['LOU'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('DF', { assembly: ['STU'], mode: addressingModes.direct, bytes: '2' })
opCodes.set('E0', { assembly: ['SUBS'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('E1', { assembly: ['CMPB'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('E2', { assembly: ['SBCS'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('E3', { assembly: ['ADDD'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('E4', { assembly: ['ANDB'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('E5', { assembly: ['BITB'], mode: addressingModes.indexed, bytes: '2+' })
opCodes.set('E6', { assembly: ['LDB'], mode: addressingModes.indexed, bytes: '2' })
opCodes.set('E7', { assembly: ['STB'], mode: addressingModes.indexed, bytes: '2' })
opCodes.set('E8', { assembly: ['EORB'], mode: addressingModes.indexed, bytes: '2' })
opCodes.set('E9', { assembly: ['ADCB'], mode: addressingModes.indexed, bytes: '2' })
opCodes.set('EA', { assembly: ['ORB'], mode: addressingModes.indexed, bytes: '2' })
opCodes.set('EB', { assembly: ['ADDB'], mode: addressingModes.indexed, bytes: '2' })
opCodes.set('EC', { assembly: ['LDD'], mode: addressingModes.indexed, bytes: '2' })
opCodes.set('ED', { assembly: ['STD'], mode: addressingModes.indexed, bytes: '2' })
opCodes.set('EE', { assembly: ['LOU'], mode: addressingModes.indexed, bytes: '2' })
opCodes.set('EF', { assembly: ['STU'], mode: addressingModes.indexed, bytes: '2' })
opCodes.set('F0', { assembly: ['SUBS'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('F1', { assembly: ['CMPB'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('F2', { assembly: ['SBCS'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('F3', { assembly: ['ADDD'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('F4', { assembly: ['ANDB'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('F5', { assembly: ['BITB'], mode: addressingModes.extended, bytes: '3' })
opCodes.set('F6', { assembly: ['LDB'], mode: addressingModes.extended, bytes: '2' })
opCodes.set('F7', { assembly: ['STB'], mode: addressingModes.extended, bytes: '2' })
opCodes.set('F8', { assembly: ['EORB'], mode: addressingModes.extended, bytes: '2' })
opCodes.set('F9', { assembly: ['ADCB'], mode: addressingModes.extended, bytes: '2' })
opCodes.set('FA', { assembly: ['ORB'], mode: addressingModes.extended, bytes: '2' })
opCodes.set('FB', { assembly: ['ADDB'], mode: addressingModes.extended, bytes: '2' })
opCodes.set('FC', { assembly: ['LDD'], mode: addressingModes.extended, bytes: '2' })
opCodes.set('FD', { assembly: ['STD'], mode: addressingModes.extended, bytes: '2' })
opCodes.set('FE', { assembly: ['LOU'], mode: addressingModes.extended, bytes: '2' })
opCodes.set('FF', { assembly: ['STU'], mode: addressingModes.extended, bytes: '2' })
opCodes.set('103F', { assembly: ['SWI2'], mode: null, bytes: '4' })
opCodes.set('1083', { assembly: ['CMPD'], mode: addressingModes.immediate, bytes: '4' })
opCodes.set('108C', { assembly: ['CMPY'], mode: addressingModes.immediate, bytes: '4' })
opCodes.set('108E', { assembly: ['LDY'], mode: addressingModes.immediate, bytes: '4' })
opCodes.set('1093', { assembly: ['CMPD'], mode: addressingModes.direct, bytes: '4' })
opCodes.set('109C', { assembly: ['CMPY'], mode: addressingModes.direct, bytes: '4' })
opCodes.set('109E', { assembly: ['LDY'], mode: addressingModes.direct, bytes: '4' })
opCodes.set('109F', { assembly: ['STY'], mode: addressingModes.direct, bytes: '4' })
opCodes.set('10A3', { assembly: ['CMPD'], mode: addressingModes.indexed, bytes: '4' })
opCodes.set('10AC', { assembly: ['CMPY'], mode: addressingModes.indexed, bytes: '4' })
opCodes.set('10AE', { assembly: ['LDY'], mode: addressingModes.indexed, bytes: '4' })
opCodes.set('10AF', { assembly: ['STY'], mode: addressingModes.indexed, bytes: '4' })
opCodes.set('10B3', { assembly: ['CMPD'], mode: addressingModes.extended, bytes: '4' })
opCodes.set('10BC', { assembly: ['CMPY'], mode: addressingModes.extended, bytes: '4' })
opCodes.set('10BE', { assembly: ['LDY'], mode: addressingModes.extended, bytes: '4' })
opCodes.set('10BF', { assembly: ['STY'], mode: addressingModes.extended, bytes: '4' })
opCodes.set('10CE', { assembly: ['LDS'], mode: addressingModes.immediate, bytes: '4' })
opCodes.set('10DE', { assembly: ['LDS'], mode: addressingModes.direct, bytes: '4' })
opCodes.set('10DF', { assembly: ['STS'], mode: addressingModes.direct, bytes: '4' })
opCodes.set('10EE', { assembly: ['LDS'], mode: addressingModes.indexed, bytes: '4' })
opCodes.set('10EF', { assembly: ['STS'], mode: addressingModes.indexed, bytes: '4' })
opCodes.set('10FE', { assembly: ['LDS'], mode: addressingModes.extended, bytes: '4' })
opCodes.set('10FF', { assembly: ['STS'], mode: addressingModes.extended, bytes: '4' })
opCodes.set('113F', { assembly: ['SWI3'], mode: null, bytes: '4' })
opCodes.set('1183', { assembly: ['CMPU'], mode: addressingModes.immediate, bytes: '4' })
opCodes.set('118C', { assembly: ['CMPS'], mode: addressingModes.immediate, bytes: '4' })
opCodes.set('1193', { assembly: ['CMPU'], mode: addressingModes.direct, bytes: '4' })
opCodes.set('119C', { assembly: ['CMPS'], mode: addressingModes.direct, bytes: '4' })
opCodes.set('11A3', { assembly: ['CMPU'], mode: addressingModes.indexed, bytes: '4' })
opCodes.set('11AC', { assembly: ['CMPS'], mode: addressingModes.indexed, bytes: '4' })
opCodes.set('11B3', { assembly: ['CMPU'], mode: addressingModes.extended, bytes: '4' })
opCodes.set('11BC', { assembly: ['CMPS'], mode: addressingModes.extended, bytes: '4' })
opCodes.set('16', { assembly: ['LBRA'], mode: addressingModes.relative, bytes: '3' })
opCodes.set('17', { assembly: ['LBSA'], mode: addressingModes.relative, bytes: '3' })
opCodes.set('20', { assembly: ['BRA'], mode: addressingModes.relative, bytes: '2' })
opCodes.set('21', { assembly: ['BRN'], mode: addressingModes.relative, bytes: '2' })
opCodes.set('22', { assembly: ['BHI'], mode: addressingModes.relative, bytes: '2' })
opCodes.set('23', { assembly: ['BLS'], mode: addressingModes.relative, bytes: '2' })
opCodes.set('24', { assembly: ['BHS', 'BCC'], mode: addressingModes.relative, bytes: '2' })
opCodes.set('25', { assembly: ['BLO', 'BCS'], mode: addressingModes.relative, bytes: '2' })
opCodes.set('26', { assembly: ['BNE'], mode: addressingModes.relative, bytes: '2' })
opCodes.set('27', { assembly: ['BEQ'], mode: addressingModes.relative, bytes: '2' })
opCodes.set('28', { assembly: ['BVC'], mode: addressingModes.relative, bytes: '2' })
opCodes.set('29', { assembly: ['BVS'], mode: addressingModes.relative, bytes: '2' })
opCodes.set('2A', { assembly: ['BPL'], mode: addressingModes.relative, bytes: '2' })
opCodes.set('2B', { assembly: ['BMI'], mode: addressingModes.relative, bytes: '2' })
opCodes.set('2C', { assembly: ['BGE'], mode: addressingModes.relative, bytes: '2' })
opCodes.set('2D', { assembly: ['BLT'], mode: addressingModes.relative, bytes: '2' })
opCodes.set('2E', { assembly: ['BGT'], mode: addressingModes.relative, bytes: '2' })
opCodes.set('2F', { assembly: ['BLE'], mode: addressingModes.relative, bytes: '2' })
opCodes.set('8D', { assembly: ['BSR'], mode: addressingModes.relative, bytes: '2' })
opCodes.set('1021', { assembly: ['LBRN'], mode: addressingModes.relative, bytes: '4' })
opCodes.set('1022', { assembly: ['LBHI'], mode: addressingModes.relative, bytes: '4' })
opCodes.set('1023', { assembly: ['LBLS'], mode: addressingModes.relative, bytes: '4' })
opCodes.set('1024', { assembly: ['LBHS', 'BC'], mode: addressingModes.relative, bytes: '4' })
opCodes.set('1025', { assembly: ['LBCS', 'BLO'], mode: addressingModes.relative, bytes: '4' })
opCodes.set('1026', { assembly: ['LBNE'], mode: addressingModes.relative, bytes: '4' })
opCodes.set('1027', { assembly: ['LBEQ'], mode: addressingModes.relative, bytes: '4' })
opCodes.set('1028', { assembly: ['LBVC'], mode: addressingModes.relative, bytes: '4' })
opCodes.set('1029', { assembly: ['LBVS'], mode: addressingModes.relative, bytes: '4' })
opCodes.set('102A', { assembly: ['LBPL'], mode: addressingModes.relative, bytes: '4' })
opCodes.set('102B', { assembly: ['LBMI'], mode: addressingModes.relative, bytes: '4' })
opCodes.set('102C', { assembly: ['LBGE'], mode: addressingModes.relative, bytes: '4' })
opCodes.set('102D', { assembly: ['LBLT'], mode: addressingModes.relative, bytes: '4' })
opCodes.set('102E', { assembly: ['LBGT'], mode: addressingModes.relative, bytes: '4' })
opCodes.set('102F', { assembly: ['LBLE'], mode: addressingModes.relative, bytes: '4' })

const postBytes = new Map()
postBytes.set('00', '0,X')
postBytes.set('01', '1,X')
postBytes.set('02', '2,X')
postBytes.set('03', '3,X')
postBytes.set('04', '4,X')
postBytes.set('05', '5,X')
postBytes.set('06', '6,X')
postBytes.set('07', '7,X')
postBytes.set('08', '8,X')
postBytes.set('09', '9,X')
postBytes.set('0A', '10,X')
postBytes.set('0B', '11,X')
postBytes.set('0C', '12,X')
postBytes.set('0D', '13,X')
postBytes.set('0E', '14,X')
postBytes.set('0F', '15,X')
postBytes.set('10', '-16,X')
postBytes.set('11', '-15,X')
postBytes.set('12', '-14,X')
postBytes.set('13', '-13,X')
postBytes.set('14', '-12,X')
postBytes.set('15', '-11,X')
postBytes.set('16', '-10,X')
postBytes.set('17', '-9,X')
postBytes.set('18', '-8,X')
postBytes.set('19', '-7,X')
postBytes.set('1A', '-6,X')
postBytes.set('1B', '-5,X')
postBytes.set('1C', '-4,X')
postBytes.set('1D', '-3,X')
postBytes.set('1E', '-2,X')
postBytes.set('1F', '-1,X')
postBytes.set('20', '0,Y')
postBytes.set('21', '1,Y')
postBytes.set('22', '2,Y')
postBytes.set('23', '3,Y')
postBytes.set('24', '4,Y')
postBytes.set('25', '5,Y')
postBytes.set('26', '6,Y')
postBytes.set('27', '7,Y')
postBytes.set('28', '8,Y')
postBytes.set('29', '9,Y')
postBytes.set('2A', '10,Y')
postBytes.set('2B', '11,Y')
postBytes.set('2C', '12,Y')
postBytes.set('2D', '13,Y')
postBytes.set('2E', '14,Y')
postBytes.set('2F', '15,Y')
postBytes.set('30', '-16,Y')
postBytes.set('31', '-15,Y')
postBytes.set('32', '-14,Y')
postBytes.set('33', '-13,Y')
postBytes.set('34', '-12,Y')
postBytes.set('35', '-11,Y')
postBytes.set('36', '-10,Y')
postBytes.set('37', '-9,Y')
postBytes.set('38', '-8,Y')
postBytes.set('39', '-7,Y')
postBytes.set('3A', '-6,Y')
postBytes.set('3B', '-5,Y')
postBytes.set('3C', '-4,Y')
postBytes.set('3D', '-3,Y')
postBytes.set('3E', '-2,Y')
postBytes.set('3F', '-1,Y')
postBytes.set('40', '0,U')
postBytes.set('41', '1,U')
postBytes.set('42', '2,U')
postBytes.set('43', '3,U')
postBytes.set('44', '4,U')
postBytes.set('45', '5,U')
postBytes.set('46', '6,U')
postBytes.set('47', '7,U')
postBytes.set('48', '8,U')
postBytes.set('49', '9,U')
postBytes.set('4A', '10,U')
postBytes.set('4B', '11,U')
postBytes.set('4C', '12,U')
postBytes.set('4D', '13,U')
postBytes.set('4E', '14,U')
postBytes.set('4F', '15,U')
postBytes.set('50', '-16,U')
postBytes.set('51', '-15,U')
postBytes.set('52', '-14,U')
postBytes.set('53', '-13,U')
postBytes.set('54', '-12,U')
postBytes.set('55', '-11,U')
postBytes.set('56', '-10,U')
postBytes.set('57', '-9,U')
postBytes.set('58', '-8,U')
postBytes.set('59', '-7,U')
postBytes.set('5A', '-6,U')
postBytes.set('5B', '-5,U')
postBytes.set('5C', '-4,U')
postBytes.set('5D', '-3,U')
postBytes.set('5E', '-2,U')
postBytes.set('5F', '-1,U')
postBytes.set('60', '0,S')
postBytes.set('61', '1,S')
postBytes.set('62', '2,S')
postBytes.set('63', '3,S')
postBytes.set('64', '4,S')
postBytes.set('65', '5,S')
postBytes.set('66', '6,S')
postBytes.set('67', '7,S')
postBytes.set('68', '8,S')
postBytes.set('69', '9,S')
postBytes.set('6A', '10,S')
postBytes.set('6B', '11,S')
postBytes.set('6C', '12,S')
postBytes.set('6D', '13,S')
postBytes.set('6E', '14,S')
postBytes.set('6F', '15,S')
postBytes.set('70', '-16,S')
postBytes.set('71', '-15,S')
postBytes.set('72', '-14,S')
postBytes.set('73', '-13,S')
postBytes.set('74', '-12,S')
postBytes.set('75', '-11,S')
postBytes.set('76', '-10,S')
postBytes.set('77', '-9,S')
postBytes.set('78', '-8,S')
postBytes.set('79', '-7,S')
postBytes.set('7A', '-6,S')
postBytes.set('7B', '-5,S')
postBytes.set('7C', '-4,S')
postBytes.set('7D', '-3,S')
postBytes.set('7E', '-2,S')
postBytes.set('7F', '-1,S')
postBytes.set('80', ',X+')
postBytes.set('81', ',X++')
postBytes.set('82', ',-X')
postBytes.set('83', ',--X')
postBytes.set('84', ',X')
postBytes.set('85', 'B,X')
postBytes.set('86', 'A,X')
postBytes.set('88', 'nn,X')
postBytes.set('89', 'mmnn,X')
postBytes.set('8B', 'D,X')
postBytes.set('8C', 'nn,PC')
postBytes.set('8D', 'mmnn,PC')
postBytes.set('91', '[,X++]')
postBytes.set('93', '[,--X]')
postBytes.set('94', '[,X]')
postBytes.set('95', '[B,X]')
postBytes.set('96', '[A,X]')
postBytes.set('98', '[nn,X]')
postBytes.set('99', '[mmnn,X]')
postBytes.set('9B', '[D,X]')
postBytes.set('9C', '[nn,PC]')
postBytes.set('9D', '[mmnn,PC]')
postBytes.set('9F', '[mmnn]')
postBytes.set('A0', ',Y+')
postBytes.set('A1', ',Y++')
postBytes.set('A2', ',-Y')
postBytes.set('A3', ',--Y')
postBytes.set('A4', ',Y')
postBytes.set('A5', 'B,Y')
postBytes.set('A6', 'A,Y')
postBytes.set('A8', 'nn,Y')
postBytes.set('A9', 'mmnn,Y')
postBytes.set('AB', 'D,Y')
postBytes.set('AC', 'nn,PC')
postBytes.set('AD', 'mmnn,PC')
postBytes.set('B1', '[,Y++]')
postBytes.set('B3', '[,--Y]')
postBytes.set('B4', '[,Y]')
postBytes.set('B5', '[B,Y]')
postBytes.set('B6', '[A,Y]')
postBytes.set('B8', '[nn,Y]')
postBytes.set('B9', '[mmnn,Y]')
postBytes.set('BB', '[D,Y]')
postBytes.set('BC', '[nn,PC]')
postBytes.set('BD', '[mmnn,PC]')
postBytes.set('BF', '[mmnn]')
postBytes.set('C0', ',U+')
postBytes.set('C1', ',U++')
postBytes.set('C2', ',-U')
postBytes.set('C3', ',--U')
postBytes.set('C4', ',U')
postBytes.set('C5', 'B,U')
postBytes.set('C6', 'A,U')
postBytes.set('C8', 'nn,U')
postBytes.set('C9', 'mmnn,U')
postBytes.set('CB', 'D,U')
postBytes.set('CC', 'nn,PC')
postBytes.set('CD', 'mmnn,PC')
postBytes.set('D1', '[,U++]')
postBytes.set('D3', '[,--U]')
postBytes.set('D4', '[,U]')
postBytes.set('D5', '[B,U]')
postBytes.set('D6', '[A,U]')
postBytes.set('D8', '[nn,U]')
postBytes.set('D9', '[mmnn,U]')
postBytes.set('DB', '[D,U]')
postBytes.set('DC', '[nn,PC]')
postBytes.set('DD', '[mmnn,PC]')
postBytes.set('DF', '[mmnn]')
postBytes.set('E0', ',S+')
postBytes.set('E1', ',S++')
postBytes.set('E2', ',-S')
postBytes.set('E3', ',--S')
postBytes.set('E4', ',S')
postBytes.set('E5', 'B,S')
postBytes.set('E6', 'A,S')
postBytes.set('E8', 'nn,S')
postBytes.set('E9', 'mmnn,S')
postBytes.set('EB', 'D,S')
postBytes.set('EC', 'nn,PC')
postBytes.set('ED', 'mmnn,PC')
postBytes.set('F1', '[,S++]')
postBytes.set('F3', '[,--S]')
postBytes.set('F4', '[,S]')
postBytes.set('F5', '[B,S]')
postBytes.set('F6', '[A,S]')
postBytes.set('F8', '[nn,S]')
postBytes.set('F9', '[mmnn,S]')
postBytes.set('FB', '[D,S]')
postBytes.set('FC', '[nn,PC]')
postBytes.set('FD', '[mmnn,PC]')
postBytes.set('FF', '[mmnn]')

module.exports = { opCodes, postBytes, addressingModes }